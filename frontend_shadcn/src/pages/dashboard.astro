---
import axios from "axios";

import "rsuite/dist/rsuite.min.css";
import "@/styles/globals.css";

import Table from "@/components/rsuite/Table.jsx";
import {Selector, MultiSelector, SelectorOption} from "@/components/react/Selector";
import { Button } from "@/components/ui/button";
import { DatePickerWithRange } from "@/components/react/DatePickerWithRange.tsx";
import Charts from "@/components/react/Charts.jsx";

import Layout from "../layouts/Layout.astro";
import H1_Custom from "../components/H1_Custom.astro";
import Grid1x4 from "../components/GridTemplates/Grid_1x4.astro";

import {
  dates,
  getDataInRangeNew,
  getDataInRange,
} from "@/utils/dataStore";

const domainName =
  import.meta.env.PUBLIC_BE_DOMAIN_NAME || "http://localhost:3000";

const fetchedData = await axios.get(
  domainName + "/api/getAllPropertiesWithStats"
);

const data = fetchedData.data;
const $dates = dates.get();
const initialData = getDataInRangeNew(data, $dates);
const initialData2 = getDataInRange(data, $dates);




const diagramArtArray: SelectorOption[] = [
        { label: "Balken Diagramm", value: "bd" },
        { label: "Linien Diagramm", value: "ld" },
      ];

const aggMethodArray: SelectorOption[] = [
        { label: "Monatlich", value: "monthly" },
        { label: "Wöchentlich", value: "weekly" },
        { label: "Täglich", value: "daily" },
      ];


const poSet: Set<string> = new Set(data.map((item: { po: string }) => item.po));
const poArray: SelectorOption[]  = [...poSet].map((item: string) => ({
  label: item,
  value: item,
}));

const gewerkeSet: Set<string> = new Set(data.map((item: { gewerk: string }) => item.gewerk));
const gewerkeArray: SelectorOption[] = [...gewerkeSet].map((item) => ({
  label: item,
  value: item,
}));

const unterGewerkeSet: Set<string> = new Set(
  data
    .map(
      (item: { untergewerk: [string] }) =>
        item.untergewerk && item.untergewerk[0]
    )
    .filter((item: string) => item !== undefined)
);
const unterGewerkeArray: SelectorOption[] = [...unterGewerkeSet].map((item) => ({
  label: item,
  value: item,
}));

const domainArray: SelectorOption[] = data.map((item: { label: string }) => ({
        label: item.label,
        value: item.label,
      }))

---

<Layout title="Dashboard">
  
  <header >
    <H1_Custom>Dashboard09</H1_Custom>
    <div class="absolute right-5 top-5">
      <form action="/" >
        <Button type="submit" >Sign out</Button>
      </form>
    </div>
  </header>
  <main class="mx-auto max-w-5xl p-4">
    <Grid1x4
      class:list={[
        "grid grid-cols-1 gap-8 place-content-around md:grid-cols-1 lg:grid-cols-4",
      ]}
    >
      <DatePickerWithRange client:load />
      <Selector options={diagramArtArray} placeholder={{label: "Balken Diagramm", value: "bd"}} keyForState={"diagramArt"} client:load/>
      <Selector options={aggMethodArray} placeholder={{label: "Monatlich", value: "monthly"}} keyForState={"aggregatedMethod"} client:load/>
      </Grid1x4>
      <Grid1x4
      class:list={[
        "grid grid-cols-1 gap-8 place-content-around md:grid-cols-1 lg:grid-cols-4",
      ]}
    >
      <MultiSelector options={poArray} clearable={true} placeholder={{label: "Product Owner", value: null}} keyForState={"productOwnerSelection"} client:load/>
      <MultiSelector options={gewerkeArray} clearable={true} placeholder={{label: "Gewerk", value: null}} keyForState={"gewerkSelection"} client:load/>
      <MultiSelector options={unterGewerkeArray} clearable={true} placeholder={{label: "Untergewerk", value: null}} keyForState={"unterGewerkSelection"} client:load/>
      <MultiSelector options={domainArray} clearable={true} placeholder={{label: "Domain", value: null}}
      keyForState={"domainSelection"}
       client:load/>
    </Grid1x4>
    <Grid1x4>
      <Charts items={data} initialData={initialData} client:load />
    </Grid1x4>
    <Grid1x4>
      <Table items={data} initalData={initialData2} client:load />
    </Grid1x4>
  </main>
</Layout>
